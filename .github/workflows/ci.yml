on: 
  pull_request:
  workflow_dispatch:

# this cancels workflows currently in progress if you start a new one
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build-and-test:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v3

      # note: moving this step to a bash script will not work, the GITHUB_TOKEN is not passed properly
      - name: Fetch releases data and save to file. Authorization is used to prevent rate limiting.
        run: |
          curl --request GET \
          --url https://api.github.com/repos/roc-lang/roc/releases \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --output roc_releases.json
          
      - id: try_fetching_testing_release
        continue-on-error: true
        run: |
          echo "ROC_RELEASE_URL=$(./ci/get_latest_release_url.sh linuxTESTING_x86_64)" >> $GITHUB_ENV
          [ -z "${ROC_RELEASE_URL}" ] && exit 1 || exit 0
    
      - name: There are no TESTING releases, checking regular releases instead
        if: steps.try_fetching_testing_release.outcome == 'failure'
        run: |
          echo "ROC_RELEASE_URL=$(./ci/get_latest_release_url.sh linux_x86_64)" >> $GITHUB_ENV

      - name: Get the archive from the url.
        run: curl -OL ${{ env.ROC_RELEASE_URL }}

      - name: rename nightly tar
        run: mv $(ls | grep "roc_nightly.*tar\.gz") roc_nightly.tar.gz

      - name: decompress the tar
        run: tar -xzf roc_nightly.tar.gz

      - run: rm roc_nightly.tar.gz

      - name: simplify nightly folder name
        run: mv roc_nightly* roc_nightly

      # <-- START BUILD TESTS
      - run: ./roc_nightly/roc build ./file-testBROKEN.roc

      # linker=legacy because 3609
      - run: ./roc_nightly/roc build ./examples/args.roc --linker=legacy

      - run: ./roc_nightly/roc build ./examples/countdown.roc

      - run: ./roc_nightly/roc build ./examples/echo.roc

      - run: ./roc_nightly/roc build ./examples/env.roc

      - run: ./roc_nightly/roc build ./examples/file-read.roc

      - run: ./roc_nightly/roc build ./examples/file-mixedBROKEN.roc

      - run: ./roc_nightly/roc build ./examples/form.roc

      - run: ./roc_nightly/roc build ./examples/http-get.roc
      # END BUILD TESTS -->

      - run: sudo apt install -y expect ncat
      # expect for testsing
      # ncat for tcp-client example
      # <-- START RUN TESTS
      - run: expect -v

      - run: expect ci/expect_scripts/args.exp

      - run: expect ci/expect_scripts/countdown.exp

      - run: expect ci/expect_scripts/echo.exp

      - run: expect ci/expect_scripts/env.exp

      - run: expect ci/expect_scripts/form.exp

      - run: expect ci/expect_scripts/file-read.exp

      - run: expect ci/expect_scripts/http-get.exp

      - run: expect ci/expect_scripts/tcp-client.exp

      # <-- END RUN TESTS

# TODO clippy, rustfmt, roc fmt check

